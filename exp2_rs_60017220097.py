# -*- coding: utf-8 -*-
"""Exp2 RS 60017220097

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I1q9WXYGk9P9_VhqtkeZLs9MHe4fKVaS
"""

import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity

# Sample user-item interaction data (replace with your own data)
data = {
    'User1': [4, 5, 1, 2, 2],
    'User2': [5, 3, 4, 5, 5],
    'User3': [1, 4, 1, 2, 0],
    'User4': [3, 2, 1, 5, 4],
    'User5': [3, 2, 1, 5, 4],
    'User6': [3, 2, 1, 5, 4],
    'User7': [3, 2, 1, 5, 4],
    'User8': [3, 2, 1, 5, 4],
    'User9': [3, 2, 1, 5, 4],

}
df = pd.DataFrame(data, index=['Item1', 'Item2', 'Item3', 'Item4', 'Item5'])

# Function to calculate cosine similarity between users
def calculate_user_similarity(user1, user2):
    user1_data = df.loc[:, user1]
    user2_data = df.loc[:, user2]
    # Use cosine similarity from scikit-learn
    similarity = cosine_similarity([user1_data, user2_data])
    return similarity[0, 1]

# Function to recommend items to a user
def recommend_items(target_user, num_recommendations=3):
    # Calculate similarity between the target user and all other users
    similarities = {}
    for user in df.columns:
        if user != target_user:
            similarity = calculate_user_similarity(target_user, user)
            similarities[user] = similarity

    # Sort users by similarity in descending order
    sorted_users = sorted(similarities, key=similarities.get, reverse=True)

    # Generate recommendations based on the most similar user
    recommendations = []
    for item in df.index:
        if df.loc[item, target_user] == 0:
            total_score = 0
            sim_sum = 0
            for user in sorted_users:
                if df.loc[item, user] > 0:
                    total_score += df.loc[item, user] * similarities[user]
                    sim_sum += abs(similarities[user])
            if sim_sum > 0:
                recommendations.append((item, total_score / sim_sum))

    # Sort recommendations by score in descending order
    recommendations.sort(key=lambda x: x[1], reverse=True)

    # Return the top N recommended items
    return recommendations[:num_recommendations]

# Example of recommending items to 'User1'
target_user = 'User3'
recommended_items = recommend_items(target_user, num_recommendations=3)
print(f"Recommended items for {target_user}:")
for item, score in recommended_items:
    print(f"{item}: Score = {score}")